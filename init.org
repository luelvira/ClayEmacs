#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: README
* Emacs Config
** About
This is my personal configuration for *Emacs*. I have been inspired by other
developers such us:
- 
- 
- 
** About README

This README is exported from ~init.org~ which contains *references* to the code
blocks that conforms the configuration. The command used to export it is ~M-x
org-gfm-export-to-markdown~. This command is part of the package ~~
In [[https://github.com/MatthewZMD/.emacs.d][M-EMACS]], the author mention that this approach improve the cleanness of the
configuration, and the startup performance from the all in one file used to be use.


** Other options
Emacs allows to export src blocks to a ~.el~ file and load them. This is a great
option if you would like to describe each part of the configuation and explain a
bit of them. To make them, you need to create a ~init.el~ file with the following
code.

*Note* When I move to straight there is a bug with org-mode than generate a
conflict with this method. I need to tangle manually all the config to the
~init.el~ file and ~early-init.el~ file respectively.

#+begin_example emacs-lisp :tangle no
(org-babel-load-file
(expand-file-name
"config.org"
  user-emacs-directory))
#+end_example

* Starup

** lexical-binding

Lexical binding is a mode that allows to use special features of the languages. It options tell the configuration that works as a program more than just a simple configuration

This will generate a header at the top of the tangled file to indicate it is generated and is not meant to be modified directly.

#+INCLUDE: "init.el" src emacs-lisp :lines "1-2"
* Early init
The /early-init/ file is loaded before any process of emacs, either the package
system. So I will configure the directories used by Emacs to prevent the default
behavior which get dirty the configuration folder.

#+INCLUDE: "early-init.el" src emacs-lisp :range-begin "SetupFolder :range-end "-SetupFolder"

Package initialize occurs automatically, before user-init-file is loaded, but after early-init file. We handle package initialization, so we must prevent Emacs from doing it early! I use straight as package manager, so I need to disable the default behavior before the ~package.el~ is loaded.

#+INCLUDE: "early-init.el" src emacs-lisp :range-begin "DisablePackage" :range-end "-DisablePackage" :lines "26-36"


** Startup performance

Make startup faster by reducing the frequency of garbage collection and then use
a hook to measure Emacs startup time.

#+INCLUDE: "early-init.el" src emacs-lisp :range-begin "SpeedUp" :range-end "-SpeedUp"

After Emacs is launched, we should restore the value of this modifications with
a hook. Also, this allows us to keep a profile of the time needed for this
process.

#+INCLUDE: "init.el" src emacs-lisp :range-begin "BetterGC" :range-end "-BetterGC"

Also, we can prevent launch the hook associated with some files modification in
startup and reenable it after all the process is completed. From [[https://github.com/MatthewZMD/.emacs.d][MatthewZMD]]

#+begin_quote
Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it wonâ€™t need any of them.
#+end_quote

#+INCLUDE: "early-init.el" src emacs-lisp :range-begin "FilenameHandler" :range-end "-FilenameHandler"

** Disable unnecessary interfaces

Before the windows is created, we can disable some components to prevent it renders

#+INCLUDE: "early-init.el" src emacs-lisp :range-begin "DefaultUI" :range-end "-DefaultUI"

* Boostrap configuration

** Load Path

All the configuration files are stored in ~modules/~ folder, so they need to be
added to ~load-path~ variable

#+INCLUDE: "init.el" src emacs-lisp :range-begin "LoadPath" :range-end "-LoadPath"

** Package management

For package management I combine ~use-package~ with ~straight~. To boot the process, I will disable the checking step that ensure the system has the newest version of each package.

#+INCLUDE: "modules/init-package.el" src emacs-lisp :range-begin "Straight" :range-end "-Straight"

In systems different to Linux, I don't use straight, I prefer to use the default
one system.

#+INCLUDE: "modules/init-package.el" src emacs-lisp :range-begin "DefaultPakcageManagement" :range-end "-DefaultPakcageManagement"

When Emacs uses the default package manager, it is needed to install
~use-package~

#+INCLUDE: "modules/init-package.el" src emacs-lisp :range-begin "UsePackage" :range-end "-UsePackage"
  
** Define constants

*** Get environment variables
This part aims to setting some special configuration based on the system Emacs is running
#+INCLUDE: "modules/init-consts.el" src emacs-lisp :range-begin "MachineInfo" :range-end "-MachinInfo"

*** Get the user information
#+INCLUDE: "modules/init-consts.el" src emacs-lisp :range-begin "UserInfo" :range-end "-UserInfo"

*** Run times constants
#+INCLUDE: "modules/init-consts.el" src emacs-lisp :range-begin "Consts" :range-end "Consts"

** Clean Launch screen

With the following configuration, I remove the start tutorial

#+INCLUDE: :modules/general-config" src emacs-lisp :range-begin "StartupScreen" :range-end "StartupScreen"

* Global configugarion

** Keep it clean

First I define the default emacs back-up where all the cache files will be
stored. I set the emacs directory in early-init to prevent emacs install staffs
inside the config folder. Use ~no-littering~ to automatically set common paths to
the new user-emacs-directory. Then define where will be store the temporal
files.

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "ResetVars" :range-end "-ResetVars"

*** No littering
No littering is a package that aims to help you manage the backup files

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "NoLittering" :range-end "-NoLittering"

** Custom File
Also I will change the location of the custom-file.el, setting it in the config folder

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "SetupCustomFile" :range-end "-SetupCustomFile"

** Bindings

Disable some default bindings
#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "DefBindings" :range-end "-DefBindings"

** Default encoding

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "DefaultEncoding" :range-end "-DefaultEncoding"

** Disable Warnings

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "DisableWarnings" :range-end "-DisableWarning"

** Recovery

Save every possible history, set the history length to 25 and remove
duplication, and store the last cursor position inside a file.

#+INCLUDE: "modules/general-config.el" src emacs-lisp :range-begin "Recovery" :range-end "-Recovery"
